using System;
using MultiNoa.Networking.PacketHandling;

namespace MultiNoa.Extensions
{
    public static class PacketExtensions
    {
        /// <summary>
        /// Tries converting this instance of T to bytes.
        /// </summary>
        /// <param name="obj">Object to convert</param>
        /// <param name="bytes">Generated Byte-Array</param>
        /// <param name="skipTypeCheck">Skip internal type validity-check?</param>
        /// <param name="writeLength">Write packet length? (Needed to send bytes)</param>
        /// <typeparam name="T">Type to convert</typeparam>
        /// <returns>Population-State of byte[] "bytes"</returns>
        public static bool TryConvertToBytes<T>(this T obj, out byte[] bytes, bool skipTypeCheck = false, bool writeLength = true) where T: struct
        {
            try
            {
                bytes = PacketConverter.ObjectToByte(obj, skipTypeCheck, writeLength);
                return true;
            }
            catch (Exception)
            {
                bytes = null;
                return false;
            }
        }

        /// <summary>
        /// Tries converting byte-array to packet
        /// </summary>
        /// <param name="bytes">bytes to convert</param>
        /// <param name="output">generated packet object</param>
        /// <param name="containsLength">do bytes include packet length?</param>
        /// <returns>Population-State of object "output"</returns>
        public static bool TryConvertToPacket(this byte[] bytes, out object output, bool containsLength = false)
        {
            try
            {
                output = PacketConverter.BytesToObject(bytes, containsLength);
                return true;
            }
            catch (Exception e)
            {
                output = null;
                return false;
            }
        }
        
        
        
    }
}